let balance = 1000; // Initial demo balance
let winChance = 100; // Win chance in percentage (50% in this example)


document.getElementById('lever').addEventListener('click', function() {
    let reels = document.querySelectorAll('.reel');
    let result = document.getElementById('result');
    let betAmount = parseInt(document.getElementById('bet').value); // Get the bet amount from an input field with id 'bet'

    // Check if the lever is disabled (game in progress)
    if (document.getElementById('lever').disabled) {
        return; // Exit the function if the lever is disabled
    }

    // Check if the bet amount is valid
    if (betAmount > balance) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        return;
    }
    if (betAmount < 10) {
        alert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞¬∞ - 10!');
        return;
    }
    if (betAmount <= 0) {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
        return;
    }

    // Disable the lever while spinning
    document.getElementById('lever').disabled = true;

    let animationDuration = 100; // Initial duration for first reel (in milliseconds)
    let spins = 0; // Counter for the number of spins

    let spinInterval = setInterval(function() {
        reels.forEach(reel => {
            let symbol = getRandomSymbolWithChance(winChance); // Get random symbol with win chance
            reel.textContent = symbol;
            reel.style.animation = `spin ${animationDuration}ms linear infinite`; // Set animation duration for each reel
        });

        spins++;

        if (spins === 10) {
            clearInterval(spinInterval); // Stop spinning after 10 spins

            let winMultiplier = getWinMultiplier(reels);
            let totalWin = betAmount * winMultiplier;

            setTimeout(function() {
                if (winMultiplier > 1) {
                    result.textContent = `–ü–æ–±–µ–¥–∞ x${winMultiplier}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${totalWin}`;

                    // Update balance after displaying result
                    balance += totalWin; // Add the total win to the balance
                } else {
                    result.textContent = '–ü—Ä–æ–∏–≥—Ä—ã—à';

                    // Prevent balance from going negative
                    if (balance - betAmount < 0) {
                        balance = 0; // Set balance to 0 if it would go negative
                    } else {
                        balance -= betAmount; // Deduct the bet amount from the balance
                    }
                }

                if (winMultiplier === 500) {
                    // –†‚Äô–†—ï–°–É–†—ó–°–Ç–†—ï–†—ë–†¬∑–†–Ü–†—ï–†“ë–†—ë–†—ò –†¬∑–†–Ü–°—ì–†—î–†—ï–†–Ü–†—ï–†‚Ññ –°–å–°‚Äû–°‚Äû–†¬µ–†—î–°‚Äö
                    let audio = new Audio('win_sound.mp3');
                    audio.play();
                }
                if (winMultiplier === 2) {
                    // –†‚Äô–†—ï–°–É–†—ó–°–Ç–†—ï–†—ë–†¬∑–†–Ü–†—ï–†“ë–†—ë–†—ò –†¬∑–†–Ü–°—ì–†—î–†—ï–†–Ü–†—ï–†‚Ññ –°–å–°‚Äû–°‚Äû–†¬µ–†—î–°‚Äö
                    let audio = new Audio('win_sound2.mp3');
                    audio.play();
                }
                if (winMultiplier === 3) {
                    // –†‚Äô–†—ï–°–É–†—ó–°–Ç–†—ï–†—ë–†¬∑–†–Ü–†—ï–†“ë–†—ë–†—ò –†¬∑–†–Ü–°—ì–†—î–†—ï–†–Ü–†—ï–†‚Ññ –°–å–°‚Äû–°‚Äû–†¬µ–†—î–°‚Äö
                    let audio = new Audio('win_sound2.mp3');
                    audio.play();
                }
                if (winMultiplier === 10) {
                    // –†‚Äô–†—ï–°–É–†—ó–°–Ç–†—ï–†—ë–†¬∑–†–Ü–†—ï–†“ë–†—ë–†—ò –†¬∑–†–Ü–°—ì–†—î–†—ï–†–Ü–†—ï–†‚Ññ –°–å–°‚Äû–°‚Äû–†¬µ–†—î–°‚Äö
                    let audio = new Audio('win_sound2.mp3');
                    audio.play();
                }
                if (winMultiplier === 50) {
                    // –†‚Äô–†—ï–°–É–†—ó–°–Ç–†—ï–†—ë–†¬∑–†–Ü–†—ï–†“ë–†—ë–†—ò –†¬∑–†–Ü–°—ì–†—î–†—ï–†–Ü–†—ï–†‚Ññ –°–å–°‚Äû–°‚Äû–†¬µ–†—î–°‚Äö
                    let audio = new Audio('win_sound2.mp3');
                    audio.play();
                }

                // Update balance display after showing result
                document.getElementById('balance').textContent = balance;

                // Re-enable the lever after displaying result
                document.getElementById('lever').disabled = false;
            }, 1500); // Delay result display for 1.5 seconds after spinning ends
        }

        animationDuration += 100; // Increase animation duration for next spin
    }, 100); // Spin every 100ms

    // Reset result text
    result.textContent = '';
});

// Function to initialize the balance display
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞
function initializeBalance() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ localStorage
    balance = loadBalanceFromLocalStorage();
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    document.getElementById('balance').textContent = balance;
}


// Call the initializeBalance function when the page loads
initializeBalance();

// Function to get the win multiplier
function getWinMultiplier(reels) {
    let symbols = [];
    reels.forEach(reel => {
        symbols.push(reel.textContent);
    });

    if (symbols.every(symbol => symbol === symbols[0])) {
        // If all symbols are the same, calculate the multiplier
        if (symbols[0] === 'üçí') {
            return 2; // x2 multiplier for cherry
        } else if (symbols[0] === 'üçä') {
            return 3; // x3 multiplier for lemon
        } else if (symbols[0] === 'üçì') {
            return 10; // x500 multiplier for orange
        } else if (symbols[0] === '‚≠ê') {
            return 50; // x1000 multiplier for diamond
        } else if (symbols[0] === 'üíé') {
            return 500
        }
    }

    return 1; // No win multiplier
}

// Function to get a random symbol with win chance
function getRandomSymbolWithChance(chance) {
    let symbols = ['üçí', 'üçä', 'üçì', '‚≠ê', 'üíé']; // Add more symbols as needed
    let randomNum = Math.random() * 100; // Random number between 0 and 100

    if (randomNum < chance) {
        // Return a symbol with win chance
        return symbols[Math.floor(Math.random() * symbols.length)];
    } else {
        // Return a random symbol (no win)
        return symbols[Math.floor(Math.random() * (symbols.length - 1))];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ localStorage
function saveBalanceToLocalStorage(balance) {
    localStorage.setItem('balance', balance);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ localStorage
function loadBalanceFromLocalStorage() {
    const savedBalance = localStorage.getItem('balance');
    return savedBalance ? parseInt(savedBalance) : 1000; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ 1000
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ "–ö—É–ø–∏—Ç—å"
const buyButtons = document.querySelectorAll('.buy-btn');

buyButtons.forEach(button => {
    button.addEventListener('click', () => {
        const price = parseInt(button.getAttribute('data-price'));
        const freeSpins = parseInt(button.getAttribute('data-free-spins'));

        if (price === 0 && freeSpins > 0) {
            // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            // –î–æ–±–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            addFreeSpins(freeSpins);
            alert(`–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${freeSpins} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–∫—Ä—É—Ç–æ–∫!`);
        } else {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–æ–≤–∞—Ä, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
            if (balance >= price) {
                balance -= price; // –í—ã—á–∏—Ç–∞–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞
                saveBalanceToLocalStorage(balance); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
                document.getElementById('balance').textContent = balance; // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                alert('–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
            } else {
                alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
            }
        }
    });
});
